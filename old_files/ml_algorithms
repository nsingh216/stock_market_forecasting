import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, TimeSeriesSplit
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from statsmodels.tsa.arima_model import ARIMA
from datetime import datetime
from yellowbrick.regressor import ResidualsPlot
from pandas.plotting import autocorrelation_plot
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf


def plot_actuals(x, y, ticker):
    figure = plt.figure()
    figure.title = "Start prices of " + ticker
    plt.plot(x, y)
    plt.xlabel("Time")
    plt.ylabel("Starting Price")
    plt.show()
    # plt.savefig(ticker + ".png")


def run_linear_regression(X_train, X_test, y_train, y_test):
    regressor = LinearRegression()
    regressor.fit(X_train, y_train)
    predictions = regressor.predict(X_test)

    r2 = r2_score(y_test, predictions)
    print("R2 for " + ticker + ": " + str(r2))

    mse = mean_squared_error(y_test, predictions)
    print("MSE for " + ticker + ": " + str(mse))

    # plt.scatter(X_test, y_test, color='black')
    # plt.plot(X_test, predictions, color='blue', linewidth=3)
    #
    # plt.xlabel("Time")
    # plt.ylabel("Starting Price")
    #
    # plt.show()


def run_arima(X_train, X_test, y_train, y_test):
    predictions = list()
    history = [x for x in X_train]

    for t in range(len(X_test)):
        model = ARIMA(X_train, order=(5, 1, 0))
        model_fit = model.fit(disp=0)
        output = model_fit.forecast()
        yhat = output[0]
        predictions.append(yhat)
        obs = X_test[t]
        history.append(obs)
        print('predicted=%f, expected=%f' % (yhat, obs))

    error = mean_squared_error(X_test, predictions)
    print('Test MSE: %.3f' % error)
    # plot
    plt.plot(y_train, y_test)
    plt.plot(predictions, color='red')
    plt.show()



data_path = "./data/"

df = pd.read_csv(data_path + "cooked_v3.csv")
print(df.head())
print(df.CalcDateTime.min())
print(df.CalcDateTime.max())

# tickers and their traded volumes
volume_series = df.groupby('Mnemonic')['TradedVolume'].sum()
volume_series.sort_values(ascending=False, inplace=True)
print(volume_series)

df.head()
df.replace([np.inf, -np.inf], np.nan)
df.dropna(inplace=True)


start_time = datetime.now()
test_size = 0.2
n_splits = int((1//test_size)-1)

for ticker in volume_series.index:
    ticker_data = df[df['Mnemonic'] == ticker]
    ticker_data.reset_index(inplace=True)

    X = pd.to_numeric(pd.to_datetime(ticker_data['CalcDateTime']))
    X = X.values.reshape(-1, 1)

    Y = ticker_data['StartPrice']
    print("Ticker " + ticker + " has " + str(len(X)) + " records.")

    # plot hourly since min-by-min is really slow
    ticker_data['CalcDateTime'] = pd.to_datetime(ticker_data['CalcDateTime'])


    # get mean prices per hour
    # hourly_ticker_data = ticker_data.reset_index().set_index(
    #     'CalcDateTime').resample('D').mean()
    # hourly_ticker_data = hourly_ticker_data.reset_index()
    # hourly_X = pd.to_datetime(hourly_ticker_data['CalcDateTime'])
    # hourly_Y = hourly_ticker_data['StartPrice']

    # using 25:75 break
    tss = TimeSeriesSplit(n_splits=n_splits)
    X_train = X_test = y_train = y_test = pd.DataFrame()
    # print(len(X))
    # print(len(Y))
    for train_index, test_index in tss.split(X):
        # print(train_index)
        # print(test_index)
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = Y[train_index], Y[test_index]
        # print(len(X_train))
        # print(len(y_test))


    # ################## VISUALS #########################
    # plot the hourly actual prices using full dataset
    # plot_actuals(hourly_X, hourly_Y, ticker)

    # ############### TIME SERIES ANALYSIS ###############

    # 1) Confirm that the data is NOT white noise

    #       a) mean = 0?
    #       b) variance is not constant?
    #       c) compare with lag values
    # desc = Y.describe()
    # print(desc['mean'])
    # print(desc['std'])
    # print(np.mean(Y))
    # print(np.std(Y))
    #
    # if desc['mean'] != 0 or desc['std'] > 1:
    #     plot_acf(ticker_data['StartPrice'], lags=100)
    #     plt.show()
    #     plt.clf()
    #     plot_pacf(ticker_data['StartPrice'], lags=100)
    #     plt.show()
    #     plt.clf()





    # 2) Check for stationarity


    # ############## LINEAR REGRESSION ###################
    # using 30:70 break
    # X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3,
    #                                                     random_state=0)

    # run and plot linear regression
    run_linear_regression(X_train, X_test, y_train, y_test)


    # ############## ARIMA ###################

    # run_arima(X_train, X_test, y_train, y_test)




end_time = datetime.now()
c = end_time - start_time
print("Ran LR in:" + str(c.total_seconds()))




